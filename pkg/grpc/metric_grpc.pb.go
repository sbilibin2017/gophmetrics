// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: metric.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MetricReadService_Get_FullMethodName  = "/metrics.MetricReadService/Get"
	MetricReadService_List_FullMethodName = "/metrics.MetricReadService/List"
)

// MetricReadServiceClient is the client API for MetricReadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for reading metrics.
type MetricReadServiceClient interface {
	Get(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*Metrics, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMetricsResponse, error)
}

type metricReadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricReadServiceClient(cc grpc.ClientConnInterface) MetricReadServiceClient {
	return &metricReadServiceClient{cc}
}

func (c *metricReadServiceClient) Get(ctx context.Context, in *GetMetricRequest, opts ...grpc.CallOption) (*Metrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Metrics)
	err := c.cc.Invoke(ctx, MetricReadService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricReadServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMetricsResponse)
	err := c.cc.Invoke(ctx, MetricReadService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricReadServiceServer is the server API for MetricReadService service.
// All implementations must embed UnimplementedMetricReadServiceServer
// for forward compatibility.
//
// Service for reading metrics.
type MetricReadServiceServer interface {
	Get(context.Context, *GetMetricRequest) (*Metrics, error)
	List(context.Context, *emptypb.Empty) (*ListMetricsResponse, error)
	mustEmbedUnimplementedMetricReadServiceServer()
}

// UnimplementedMetricReadServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricReadServiceServer struct{}

func (UnimplementedMetricReadServiceServer) Get(context.Context, *GetMetricRequest) (*Metrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMetricReadServiceServer) List(context.Context, *emptypb.Empty) (*ListMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMetricReadServiceServer) mustEmbedUnimplementedMetricReadServiceServer() {}
func (UnimplementedMetricReadServiceServer) testEmbeddedByValue()                           {}

// UnsafeMetricReadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricReadServiceServer will
// result in compilation errors.
type UnsafeMetricReadServiceServer interface {
	mustEmbedUnimplementedMetricReadServiceServer()
}

func RegisterMetricReadServiceServer(s grpc.ServiceRegistrar, srv MetricReadServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricReadServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricReadService_ServiceDesc, srv)
}

func _MetricReadService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricReadServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricReadService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricReadServiceServer).Get(ctx, req.(*GetMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricReadService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricReadServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricReadService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricReadServiceServer).List(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricReadService_ServiceDesc is the grpc.ServiceDesc for MetricReadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricReadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricReadService",
	HandlerType: (*MetricReadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _MetricReadService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MetricReadService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric.proto",
}

const (
	MetricWriteService_Update_FullMethodName = "/metrics.MetricWriteService/Update"
)

// MetricWriteServiceClient is the client API for MetricWriteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for writing/updating metrics.
type MetricWriteServiceClient interface {
	Update(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error)
}

type metricWriteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricWriteServiceClient(cc grpc.ClientConnInterface) MetricWriteServiceClient {
	return &metricWriteServiceClient{cc}
}

func (c *metricWriteServiceClient) Update(ctx context.Context, in *UpdateMetricRequest, opts ...grpc.CallOption) (*UpdateMetricResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMetricResponse)
	err := c.cc.Invoke(ctx, MetricWriteService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricWriteServiceServer is the server API for MetricWriteService service.
// All implementations must embed UnimplementedMetricWriteServiceServer
// for forward compatibility.
//
// Service for writing/updating metrics.
type MetricWriteServiceServer interface {
	Update(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error)
	mustEmbedUnimplementedMetricWriteServiceServer()
}

// UnimplementedMetricWriteServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetricWriteServiceServer struct{}

func (UnimplementedMetricWriteServiceServer) Update(context.Context, *UpdateMetricRequest) (*UpdateMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMetricWriteServiceServer) mustEmbedUnimplementedMetricWriteServiceServer() {}
func (UnimplementedMetricWriteServiceServer) testEmbeddedByValue()                            {}

// UnsafeMetricWriteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricWriteServiceServer will
// result in compilation errors.
type UnsafeMetricWriteServiceServer interface {
	mustEmbedUnimplementedMetricWriteServiceServer()
}

func RegisterMetricWriteServiceServer(s grpc.ServiceRegistrar, srv MetricWriteServiceServer) {
	// If the following call pancis, it indicates UnimplementedMetricWriteServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MetricWriteService_ServiceDesc, srv)
}

func _MetricWriteService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricWriteServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetricWriteService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricWriteServiceServer).Update(ctx, req.(*UpdateMetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricWriteService_ServiceDesc is the grpc.ServiceDesc for MetricWriteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricWriteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metrics.MetricWriteService",
	HandlerType: (*MetricWriteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _MetricWriteService_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metric.proto",
}

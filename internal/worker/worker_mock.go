// Code generated by MockGen. DO NOT EDIT.
// Source: /home/sergey/Github/gophmetrics/internal/apps/server/worker/worker.go

// Package worker is a generated GoMock package.
package worker

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/sbilibin2017/gophmetrics/internal/models"
)

// MockFileWriter is a mock of FileWriter interface.
type MockFileWriter struct {
	ctrl     *gomock.Controller
	recorder *MockFileWriterMockRecorder
}

// MockFileWriterMockRecorder is the mock recorder for MockFileWriter.
type MockFileWriterMockRecorder struct {
	mock *MockFileWriter
}

// NewMockFileWriter creates a new mock instance.
func NewMockFileWriter(ctrl *gomock.Controller) *MockFileWriter {
	mock := &MockFileWriter{ctrl: ctrl}
	mock.recorder = &MockFileWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileWriter) EXPECT() *MockFileWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockFileWriter) Save(ctx context.Context, metric *models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileWriterMockRecorder) Save(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileWriter)(nil).Save), ctx, metric)
}

// MockFileReader is a mock of FileReader interface.
type MockFileReader struct {
	ctrl     *gomock.Controller
	recorder *MockFileReaderMockRecorder
}

// MockFileReaderMockRecorder is the mock recorder for MockFileReader.
type MockFileReaderMockRecorder struct {
	mock *MockFileReader
}

// NewMockFileReader creates a new mock instance.
func NewMockFileReader(ctrl *gomock.Controller) *MockFileReader {
	mock := &MockFileReader{ctrl: ctrl}
	mock.recorder = &MockFileReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileReader) EXPECT() *MockFileReaderMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockFileReader) List(ctx context.Context) ([]*models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFileReaderMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFileReader)(nil).List), ctx)
}

// MockCurrentWriter is a mock of CurrentWriter interface.
type MockCurrentWriter struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentWriterMockRecorder
}

// MockCurrentWriterMockRecorder is the mock recorder for MockCurrentWriter.
type MockCurrentWriterMockRecorder struct {
	mock *MockCurrentWriter
}

// NewMockCurrentWriter creates a new mock instance.
func NewMockCurrentWriter(ctrl *gomock.Controller) *MockCurrentWriter {
	mock := &MockCurrentWriter{ctrl: ctrl}
	mock.recorder = &MockCurrentWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentWriter) EXPECT() *MockCurrentWriterMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockCurrentWriter) Save(ctx context.Context, metric *models.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockCurrentWriterMockRecorder) Save(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCurrentWriter)(nil).Save), ctx, metric)
}

// MockCurrentReader is a mock of CurrentReader interface.
type MockCurrentReader struct {
	ctrl     *gomock.Controller
	recorder *MockCurrentReaderMockRecorder
}

// MockCurrentReaderMockRecorder is the mock recorder for MockCurrentReader.
type MockCurrentReaderMockRecorder struct {
	mock *MockCurrentReader
}

// NewMockCurrentReader creates a new mock instance.
func NewMockCurrentReader(ctrl *gomock.Controller) *MockCurrentReader {
	mock := &MockCurrentReader{ctrl: ctrl}
	mock.recorder = &MockCurrentReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrentReader) EXPECT() *MockCurrentReaderMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockCurrentReader) List(ctx context.Context) ([]*models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCurrentReaderMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCurrentReader)(nil).List), ctx)
}
